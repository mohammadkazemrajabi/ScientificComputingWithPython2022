# -*- coding: utf-8 -*-
"""06ex_OSEMN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZDxCftodGnBKTvANLQ5R04riBFauX71D
"""

import numpy as np
import pandas as pd
import csv
import struct
import os
import math

"""1. Text files

create a list of integrer numbers and then save it to a text file named data_int.txt. Run the cat command to print the content of the file.
"""

list1=[1,2,3,4,5]
with open("data_int.txt",'w',encoding = 'utf-8') as f:
  for i in list1:
    f.write(f'{i}\n')

!cat data_int.txt

"""create a matrix of 5x5 floats and then save it to a text file named data_float.txt. Use the cat command to print the content of the file."""

matrix=np.arange(25).reshape((5,5))
print(matrix)

"""create a matrix of 5x5 floats and then save it to a text file named data_float.txt. Use the cat command to print the content of the file."""

list2=[]
matrix2=np.array
for i in range(25):
  list2.append(np.random.uniform(0,24))
#print(list2)
matrix2=np.array([list2]).reshape((5,5))
#print(m)
print(matrix2.shape)
with open("data_float.txt",'w',encoding = 'utf-8') as f:
  for i in matrix2:
    f.write(f'{i},\n')

!cat data_float.txt

"""load the txt file of the previous point and convert it to a csv file by hand.

"""

with open('data_float.txt', 'r',encoding = 'utf-8') as f1:
  with open('data_float.csv', 'w',newline='')as f2:
    writer = csv.writer(f2)
    for line in csv.reader(f1, delimiter="'"):
      writer.writerow([f'{line}'])
      #print('l',line)
!cat data_float.csv

"""2. JSON files

Load the file user_data.json, which can be found at:


"""

!wget https://www.dropbox.com/s/sz5klcdpckc39hd/user_data.json

import json # import the JSON module
dataset = json.load(open('user_data.json'))
print(dataset)

"""show a sample of that"""

dataset[1]

"""and filter the data by the "CreditCardType" when it equals to "American Express". Than save the data to a new CSV file.

**bold text**
"""

#make list and append all the CreditCardType" when it equals to "American Express"
list3=[]
for i in range(200):
  if dataset[i]['CreditCardType']=="American Express":
    list3.append(dataset[i])
print(list3)

print(list3[4])

out_file = open("myfile.json", "w")
  
json.dump(list3, out_file, indent = 6)
  
out_file.close()

!cat myfile.json

"""Than save the data to a new CSV file.

convert the previous json file which CreditCardType" when it equals to "American Express" to the csv file

in jupyter it works and newcsv has the data
but in colab sometimes it is empty aaccording to loading the data.
"""

import json 

with open('myfile.json') as json_file:
    data = json.load(json_file)
print(type(data))
newData = data
 
# now we will open a file for writing
data_file = open('newcsv.csv', 'w')
 
csv_writer = csv.writer(data_file)
 
# Counter variable used for writing
# headers to the CSV file
count = 0
 
for h in newData:
    if count == 0:
 
        # Writing headers of CSV file
        header = h.keys()
        csv_writer.writerow(header)
        count += 1
    # Writing data of CSV file
    csv_writer.writerow(h.values())

#the final result for ex 3 is:
!cat newcsv.csv

"""3. CSV files with Pandas

Load the file from this url:
"""

!wget https://www.dropbox.com/s/kgshemfgk22iy79/mushrooms_categorized.csv

import pandas as pd

dataf = pd.read_csv('mushrooms_categorized.csv')
print(dataf)

print(dataf["class"])
print(dataf['class'].shape)
print(dataf['class'].unique())

"""so we have just 2 classes in class column , for each one we should run and execute groupby method.

**calculate, using groupby(), the average value of each feature, separately for each class**

"""

g=dataf.groupby('class').mean()
print(g)
print(g.shape)

"""save the file in a JSON format.

"""

g.to_csv('final.csv')

"""Function to convert a CSV to JSON
Takes the file paths as arguments
"""

import csv
import json
 
 
# 
def csvTojson(csvFilePath, jsonFilePath):
     
    data = {}
     
    with open(csvFilePath, encoding='utf-8') as csvf:
        csvReader = csv.DictReader(csvf)
        for rows in csvReader:
            key = rows['class']
            data[key] = rows
 
   
    with open(jsonFilePath, 'w', encoding='utf-8') as j:
        j.write(json.dumps(data, indent=4))
         
csvFilePath = r'final.csv'
jsonFilePath = r'afterGroupbywithClass.json'
 
csvTojson(csvFilePath, jsonFilePath)

#the final file for ex3 after groupby and savig in json format is:
!cat afterGroupbywithClass.json

"""4. Reading the credit card numbers
Get the binary file named credit_card.dat from this address:

https://www.dropbox.com/s/8m0syw2tkul3dap/credit_card.dat
and convert the data into the real credit card number, knowing that:
"""

!wget https://www.dropbox.com/s/8m0syw2tkul3dap/credit_card.dat

with open('credit_card.dat' , 'r') as f:
  number = 1
  for j in f:
    if (number != 51):
      print(number, ")" , ''.join([chr(int(j[i:i+6],2)) for i in range(0, len(j), 6)]))
      number =number+1

"""ex5
a) Start from the data/data_000637.txt file that we have used during the previous lectures, and convert it to a binary file according to the format defined below:
"""

!wget https://www.dropbox.com/s/ga9wi6b40cakgae/data_000637.txt -P data/

import numpy as np
import pandas as pd
import csv
import struct
import os
import math

data = pd.read_csv("data/data_000637.txt" , nrows = 10)
with open("data_000637.dat", 'wb') as f:
    for i in data.values: 
        Word =  (i[5] << 0 ) 
        Word += (i[4] << 5 ) 
        Word += (i[3] << 17) 
        Word += (i[2] << 49) 
        Word += (i[1] << 58)
        Word += (i[0] << 62)
        f.write(struct.pack('<q', Word))
df1 = pd.DataFrame({}, columns = ['HEAD', 'FPGA', 'CHANNEL', 'ORBIT_CNT', 'BX_CNT', 'TDC_MEAS'])
#compare with original data
print(df1)
print("dkjfkdjf")
print(data)

with open( "data_000637.dat" , 'rb') as file:
    content = file.read()
    Counter = 0
    for i in range(0, len(content), 8):
        s = 8
        Counter += 1
        if Counter > 10: 
          break
        w = struct.unpack('<q', content[i : i + s])[0] 
        head     = (w >> 62) & 0x3
        fpga     = (w >> 58) & 0xF
        tdc_chan = (w >> 49) & 0x1FF
        orb_cnt  = (w >> 17) & 0xFFFFFFFF
        bx       = (w >> 5 ) & 0xFFF
        tdc_meas = (w >> 0 ) & 0x1F
        Columns2 = {'HEAD' : head, 'FPGA' : fpga, 'CHANNEL' : tdc_chan, 'ORBIT_CNT' : orb_cnt, 'BX_CNT' : bx, 'TDC_MEAS' : tdc_meas}
        dataframe = df1.append(Columns2 , ignore_index=True)

print(dataframe)
Dsize = os.path.getsize(r"data_000637.dat")
print(" dat file size:" , Dsize , "bytes")
Tsize = os.path.getsize(r"data/data_000637.txt")
print(" text file size:" , Tsize , "bytes")

"""the difference"""

print("" , abs(Dsize - Tsize))